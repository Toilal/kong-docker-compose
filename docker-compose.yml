version: '3.5'
networks:
  reverse-proxy:
    name: ${KONG_REVERSE_PROXY_NETWORK_NAME:-reverse-proxy}
    external: true
services:
  db:
    image: postgres:11.3
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - db-data:/var/lib/postgresql/data
    restart: ${KONG_RESTART_POLICY:-unless-stopped}
  migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: db
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
    restart: on-failure
  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-root}"
    depends_on:
      - db
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_SSL: 'off'
      KONG_CASSANDRA_CONTACT_POINTS: db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: db
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      VIRTUAL_HOST: ${KONG_VIRTUAL_HOST}
      VIRTUAL_PORT: 8000
      LETSENCRYPT_HOST: ${KONG_VIRTUAL_HOST}
    labels:
      - 'traefik.enable=true'
      - 'traefik.frontend.rule=Host:${KONG_VIRTUAL_HOST}'
      - 'traefik.port=8000'
    ports:
      - 8000:8000
      - 8001:8001
    networks:
      - default
      - reverse-proxy
    restart: ${KONG_RESTART_POLICY:-unless-stopped}
  db-konga:
    image: postgres:11.3
    environment:
      POSTGRES_DB: ${KONGA_PG_DATABASE:-konga}
      POSTGRES_PASSWORD: ${KONGA_PG_PASSWORD:-konga}
      POSTGRES_USER: ${KONGA_PG_USER:-konga}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - db-konga-data:/var/lib/postgresql/data
    restart: ${KONG_RESTART_POLICY:-unless-stopped}
  konga-prepare:
    image: pantsel/konga:0.14.1
    command: -c prepare -a postgres -u postgresql://${KONGA_PG_USER:-konga}:${KONGA_PG_PASSWORD:-konga}@db-konga/${KONGA_PG_DATABASE:-konga}
    depends_on:
      - db-konga
    restart: on-failure
  konga:
    image: pantsel/konga:0.14.1
    depends_on:
      - db-konga
    environment:
      - VIRTUAL_HOST=${KONGA_VIRTUAL_HOST}
      - VIRTUAL_PORT=1337
      - LETSENCRYPT_HOST=${KONGA_VIRTUAL_HOST}
      - NODE_ENV=production
      - TOKEN_SECRET=${KONGA_TOKEN_SECRET}
      - DB_ADAPTER=postgres
      - DB_URI=postgresql://${KONGA_PG_USER:-konga}:${KONGA_PG_PASSWORD:-konga}@db-konga/${KONGA_PG_DATABASE:-konga}
      - KONGA_SEED_USER_DATA_SOURCE_FILE=/konga.users.js
      - KONGA_SEED_KONG_NODE_DATA_SOURCE_FILE=/konga.nodes.js
    labels:
      - 'traefik.enable=true'
      - 'traefik.frontend.rule=Host:${KONGA_VIRTUAL_HOST}'
      - 'traefik.port=1337'
    volumes:
      - './konga.users.js:/konga.users.js:ro'
      - './konga.nodes.js:/konga.nodes.js:ro'
    networks:
      - default
      - reverse-proxy
    restart: ${KONG_RESTART_POLICY:-unless-stopped}
volumes:
  db-data: ~
  db-konga-data: ~
